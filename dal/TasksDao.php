<?php

include_once __DIR__ . '/Task.php';

// This code was generated by a tool. Don't modify it manually.
// http://sqldalmaker.sourceforge.net

class TasksDao
{
    protected $ds;

    public function __construct($ds)
    {
        $this->ds = $ds;
    }

    /**
     * (C)RUD: tasks
     * Generated values are passed to DTO.
     * @param Task $p
     * @return TRUE|FALSE on success|failure
     */
    public function createTask(Task $p)
    {
        $sql = "insert into tasks (g_id, t_priority, t_date, t_subject, t_comments) values (?, ?, ?, ?, ?)";
        $ai_values = array("t_id" => null);
        $res = $this->ds->insert($sql, array($p->getGId(), $p->getTPriority(), $p->getTDate(), $p->getTSubject(), $p->getTComments()), $ai_values);
        $p->setTId($ai_values["t_id"]);
        return $res;
    }

    /**
     * C(R)UD: tasks
     * @param int $tId
     * @return Task|FALSE on failure
     */
    public function readTask($tId)
    {
        $sql = "select * from tasks where t_id=?";
        $row = $this->ds->queryRow($sql, array($tId));
        if ($row) {
            $obj = new Task();
            $obj->setTId($row["t_id"]); // t <- t
            $obj->setGId($row["g_id"]); // t <- t
            $obj->setTPriority($row["t_priority"]); // t <- t
            $obj->setTDate($row["t_date"]); // t <- t
            $obj->setTSubject($row["t_subject"]); // t <- t
            $obj->setTComments($row["t_comments"]); // t <- t
            return $obj;
        }
        return FALSE;
    }

    /**
     * CR(U)D: tasks
     * @param Task $p
     * @return int the affected rows count
     */
    public function updateTask(Task $p)
    {
        $sql = "update tasks set g_id=?, t_priority=?, t_date=?, t_subject=?, t_comments=? where t_id=?";
        return $this->ds->execDML($sql, array($p->getGId(), $p->getTPriority(), $p->getTDate(), $p->getTSubject(), $p->getTComments(), $p->getTId()));
    }

    /**
     * CRU(D): tasks
     * @param int $tId
     * @return int the affected rows count
     */
    public function deleteTask($tId)
    {
        $sql = "delete from tasks where t_id=?";
        return $this->ds->execDML($sql, array($tId));
    }

    /**
     * @param string $g_id
     * @return Task[]
     */
    public function getGroupTasks($g_id)
    {
        $sql = "select * from tasks where g_id =?"
            . "\n order by t_id";
        $res = array();
        $_map_cb = function ($row) use (&$res) {
            $obj = new Task();
            $obj->setTId($row["t_id"]); // t <- q
            $obj->setGId($row["g_id"]); // t <- q
            $obj->setTPriority($row["t_priority"]); // t <- q
            $obj->setTDate($row["t_date"]); // t <- q
            $obj->setTSubject($row["t_subject"]); // t <- q
            $obj->setTComments($row["t_comments"]); // t <- q
            array_push($res, $obj);
        };
        $this->ds->queryRowList($sql, array($g_id), $_map_cb);
        return $res;
    }

}
