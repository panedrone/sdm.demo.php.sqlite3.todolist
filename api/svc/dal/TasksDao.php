<?php

// Code generated by a tool. DO NOT EDIT.
// https://sqldalmaker.sourceforge.net/


include_once __DIR__ . '/Task.php';
include_once __DIR__ . '/TaskLi.php';

class TasksDao
{
    /**
     * @var \DataStore
     */
    protected $ds;

    public function __construct($ds)
    {
        $this->ds = $ds;
    }

    /**
     * (C)RUD: tasks
     * Generated/AI values are passed to $p param
     * @param Task $p
     * @return void
     * @throws \Exception
     */
    public function create_task($p)
    {
        $sql = "insert into tasks (p_id, t_priority, t_date, t_subject, t_comments) values (?, ?, ?, ?, ?)";
        $ai_values = array("t_id" => null);
        $res = $this->ds->insert($sql, array($p->get_p_id(), $p->get_t_priority(), $p->get_t_date(), $p->get_t_subject(), $p->get_t_comments()), $ai_values);
        $p->set_t_id($ai_values["t_id"]);
        return $res;
    }

    /**
     * C(R)UD: tasks
     * @param int $t_id
     * @return Task|FALSE on failure
     * @throws \Exception
     */
    public function read_task($t_id)
    {
        $sql = "select * from tasks where t_id=?";
        $row = $this->ds->queryRow($sql, array($t_id));
        if ($row) {
            $obj = new Task();
            $obj->set_t_id($row["t_id"]); // t <- t
            $obj->set_p_id($row["p_id"]); // t <- t
            $obj->set_t_priority($row["t_priority"]); // t <- t
            $obj->set_t_date($row["t_date"]); // t <- t
            $obj->set_t_subject($row["t_subject"]); // t <- t
            $obj->set_t_comments($row["t_comments"]); // t <- t
            return $obj;
        }
        return FALSE;
    }

    /**
     * CR(U)D: tasks
     * @param Task $p
     * @throws \Exception
     */
    public function update_task($p)
    {
        $sql = "update tasks set p_id=?, t_priority=?, t_date=?, t_subject=?, t_comments=? where t_id=?";
        return $this->ds->execDML($sql, array($p->get_p_id(), $p->get_t_priority(), $p->get_t_date(), $p->get_t_subject(), $p->get_t_comments(), $p->get_t_id()));
    }

    /**
     * CRU(D): tasks
     * @param int $t_id
     * @throws \Exception
     */
    public function delete_task($t_id)
    {
        $sql = "delete from tasks where t_id=?";
        return $this->ds->execDML($sql, array($t_id));
    }

    /**
     * @param string $p_id
     * @return TaskLi[]
     * @throws \Exception
     */
    public function get_project_tasks($p_id)
    {
        $sql = "select t_id, t_priority, t_date, t_subject"
            . "\n from tasks where p_id =?"
            . "\n order by t_id";
        $res = array();
        $_map_cb = function ($row) use (&$res) {
            $obj = new TaskLi();
            $obj->set_t_id($row["t_id"]); // q <- q
            $obj->set_t_priority($row["t_priority"]); // q <- q
            $obj->set_t_date($row["t_date"]); // q <- q
            $obj->set_t_subject($row["t_subject"]); // q <- q
            array_push($res, $obj);
        };
        $this->ds->queryRowList($sql, array($p_id), $_map_cb);
        return $res;
    }
}
