<?php

// Code generated by a tool. DO NOT EDIT.
// https://sqldalmaker.sourceforge.net/


include_once __DIR__ . '/Project.php';
include_once __DIR__ . '/ProjectLi.php';

class ProjectsDao
{
    /**
     * @var \DataStore
     */
    protected $ds;

    public function __construct($ds)
    {
        $this->ds = $ds;
    }

    /**
     * (C)RUD: projects
     * Generated/AI values are passed to $p param
     * @param Project $p
     * @return true/false on success/failure
     * @throws Exception
     */
    public function create_project($p)
    {
        $sql = "insert into projects (p_name) values (?)";
        $ai_values = array("p_id" => 0);
        $res = $this->ds->insert($sql, array($p->get_p_name()), $ai_values);
        if ($res) {
            $p->set_p_id($ai_values["p_id"]);
        }
        return $res;
    }

    /**
     * C(R)UD: projects
     * @return Project[]
     * @throws Exception
     */
    public function read_project_list()
    {
        $sql = "select * from projects";
        $res = array();
        $_map_cb = function ($row) use (&$res) {
            $obj = new Project();
            $obj->set_p_id($row["p_id"]); // t <- t
            $obj->set_p_name($row["p_name"]); // t <- t
            array_push($res, $obj);
        };
        $this->ds->queryRowList($sql, array(), $_map_cb);
        return $res;
    }

    /**
     * C(R)UD: projects
     * @param int $p_id
     * @return Project|FALSE on failure
     * @throws Exception
     */
    public function read_project($p_id)
    {
        $sql = "select * from projects where p_id=?";
        $row = $this->ds->queryRow($sql, array($p_id));
        if ($row) {
            $obj = new Project();
            $obj->set_p_id($row["p_id"]); // t <- t
            $obj->set_p_name($row["p_name"]); // t <- t
            return $obj;
        }
        return FALSE;
    }

    /**
     * CR(U)D: projects
     * @param Project $p
     * @throws Exception
     */
    public function update_project($p)
    {
        $sql = "update projects set p_name=? where p_id=?";
        return $this->ds->execDML($sql, array($p->get_p_name(), $p->get_p_id()));
    }

    /**
     * CRU(D): projects
     * @param int $p_id
     * @throws Exception
     */
    public function delete_project($p_id)
    {
        $sql = "delete from projects where p_id=?";
        return $this->ds->execDML($sql, array($p_id));
    }

    /**
     * @return ProjectLi[]
     * @throws Exception
     */
    public function get_projects()
    {
        $sql = "select p.*,"
            . "\n (select count(*) from tasks where p_id=p.p_id) as p_tasks_count"
            . "\n from projects p"
            . "\n order by p.p_id";
        $res = array();
        $_map_cb = function ($row) use (&$res) {
            $obj = new ProjectLi();
            $obj->set_p_id($row["p_id"]); // t <- q
            $obj->set_p_name($row["p_name"]); // t <- q
            $obj->set_p_tasks_count($row["p_tasks_count"]); // xml(p_tasks_count) <- q
            array_push($res, $obj);
        };
        $this->ds->queryRowList($sql, array(), $_map_cb);
        return $res;
    }

    /**
     * @param string $p_id
     * @return int the affected rows count
     * @throws Exception
     */
    public function delete_tasks($p_id)
    {
        $sql = "delete from tasks where p_id=?";
        return $this->ds->execDML($sql, array($p_id));
    }
}
